{"version":3,"sources":["BooksAPI.js","components/Book.js","components/Home.js","components/Search.js","components/NotFound.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","Book","props","thumbnail","book","imageLinks","bookTitle","title","bookAuthor","authors","join","className","style","width","height","backgroundImage","value","shelf","onChange","event","updateShelf","target","disabled","Home","console","log","name","map","currentShelf","key","books","filter","id","to","Search","useState","setQuery","searchBooks","setSearchBooks","updateQuery","query","length","trim","maxResults","fetch","method","body","JSON","stringify","then","res","json","data","BooksAPI","resultBooks","error","choosenBooks","searchBook","alreadyStoredBook","find","type","placeholder","index","NotFound","App","setBooks","useEffect","search","a","concat","getBooks","b","exact","path","element","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.58ea50a3.chunk.js","sourcesContent":["const api = \"https://reactnd-books-api.udacity.com\";\n\nlet token = localStorage.token;\n\nif (!token) token = localStorage.token = Math.random().toString(36).substr(-8);\n\nconst headers = {\n  Accept: \"application/json\",\n  Authorization: token,\n};\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then((res) => res.json())\n    .then((data) => data.book);\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then((res) => res.json())\n    .then((data) => data.books);\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: \"PUT\",\n    headers: {\n      ...headers,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ shelf }),\n  }).then((res) => res.json());\n\nexport const search = (query, maxResults) =>\n  fetch(`${api}/search`, {\n    method: \"POST\",\n    headers: {\n      ...headers,\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify({ query, maxResults }),\n  })\n    .then((res) => res.json())\n    .then((data) => data.books);\n","const Book = (props) => {\r\n  // store thumbnail link in variable\r\n  let thumbnail = props.book.imageLinks;\r\n  // console.log(thumbnail);\r\n  thumbnail ? (thumbnail = thumbnail.thumbnail) : (thumbnail = \"\");\r\n  // Book Data\r\n  let bookTitle = props.book.title;\r\n  let bookAuthor = props.book.authors?.join(); // added ? so when searching for books without authors the app won't crash\r\n\r\n  return (\r\n    <div className=\"book\">\r\n      <div className=\"book-top\">\r\n        <div\r\n          className=\"book-cover\"\r\n          style={{\r\n            width: 128,\r\n            height: 188,\r\n            backgroundImage: `url(\"${thumbnail}\")`,\r\n          }}\r\n        />\r\n        <div className=\"book-shelf-changer\">\r\n          <select value={props.shelf} onChange={(event) => props.updateShelf(props.book, event.target.value)}>\r\n            <option value=\"move\" disabled>\r\n              Move to...\r\n            </option>\r\n            <option value=\"currentlyReading\">Currently Reading</option>\r\n            <option value=\"wantToRead\">Want to Read</option>\r\n            <option value=\"read\">Read</option>\r\n            <option value=\"none\">None</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n      <div className=\"book-title\">{bookTitle}</div>\r\n      <div className=\"book-authors\">{bookAuthor}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Book;\r\n","import { Link } from \"react-router-dom\";\r\nimport \"../App.css\";\r\nimport Book from \"./Book\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Home = (props) => {\r\n  const shelves = [\r\n    {\r\n      name: \"currentlyReading\",\r\n      title: \"Currently Reading\",\r\n    },\r\n    {\r\n      name: \"wantToRead\",\r\n      title: \"Want to Read\",\r\n    },\r\n    {\r\n      name: \"read\",\r\n      title: \"Read\",\r\n    },\r\n  ];\r\n  console.log(props);\r\n\r\n  return (\r\n    <div className=\"list-books\">\r\n      <div className=\"list-books-title\">\r\n        <h1>MyReads</h1>\r\n      </div>\r\n      <div className=\"list-books-content\">\r\n        <div>\r\n          {shelves.map((currentShelf, key) => (\r\n            <div className=\"bookshelf\" key={key}>\r\n              <h2 className=\"bookshelf-title\">{currentShelf.title}</h2>\r\n              <div className=\"bookshelf-books\">\r\n                <ol className=\"books-grid\">\r\n                  {props.books\r\n                    .filter((book) => book.shelf === currentShelf.name)\r\n                    .map((book) => (\r\n                      <li key={book.id}>\r\n                        <Book book={book} updateShelf={props.updateShelf} shelf={currentShelf.name} />\r\n                      </li>\r\n                    ))}\r\n                </ol>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <div className=\"open-search\">\r\n        <Link to=\"/react-books-library/search\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nHome.propTypes = {\r\n  // added TypeChecking\r\n  books: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default Home;\r\n","import React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Book from \"./Book\";\r\nimport * as BooksAPI from \"../BooksAPI\";\r\n\r\nconst Search = ({ books, updateShelf }) => {\r\n  const [query, setQuery] = useState(\"\");\r\n  const [searchBooks, setSearchBooks] = useState([]);\r\n\r\n  const updateQuery = (query) => {\r\n    if (query.length !== 0) {\r\n      // if query is empty, clear query\r\n      setQuery(query.trim()); // trim white spaces from query\r\n      BooksAPI.search(query, 10).then((resultBooks) => {\r\n        // search = (query, maxResults)\r\n        setSearchBooks(resultBooks.error ? [] : resultBooks);\r\n      });\r\n    } else {\r\n      setSearchBooks([]);\r\n    }\r\n  };\r\n\r\n  /*   const clearQuery = () => {\r\n    updateQuery(\"\");\r\n  }; */\r\n\r\n  let choosenBooks = searchBooks.map((searchBook) => {\r\n    const alreadyStoredBook = books.find((book) => {\r\n      return book.id === searchBook.id;\r\n    });\r\n    searchBook.shelf = alreadyStoredBook ? alreadyStoredBook.shelf : \"none\"; // if book already owned don't add it to shelves\r\n    return searchBook;\r\n  });\r\n\r\n  return (\r\n    <div className=\"search-books\">\r\n      <div className=\"search-books-bar\">\r\n        <Link to=\"/react-books-library/\" className=\"close-search\">\r\n          Close\r\n        </Link>\r\n        <div className=\"search-books-input-wrapper\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Search by title, author, or ISBN\"\r\n            onChange={(event) => {\r\n              updateQuery(event.target.value);\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"search-books-results\">\r\n        <ol className=\"books-grid\">\r\n          {choosenBooks.map((book, index) => {\r\n            return <Book key={index} book={book} updateShelf={updateShelf} shelf={book.shelf} />;\r\n          })}\r\n        </ol>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import \"../App.css\";\r\n\r\nconst NotFound = () => {\r\n  return (\r\n    <div className=\"not-found\">\r\n      <div>\r\n        <h1>ERROR 404</h1>\r\n      </div>\r\n      <div>\r\n        <h1>PAGE NOT FOUND</h1>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotFound;\r\n","import \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport { Route, Routes } from \"react-router-dom\";\nimport * as BooksAPI from \"./BooksAPI\";\nimport Home from \"./components/Home\";\nimport Search from \"./components/Search\";\nimport NotFound from \"./components/NotFound\";\n\nfunction App() {\n  const [books, setBooks] = useState([]);\n\n  useEffect(() => {\n    let search = true;\n\n    const getBooks = async () => {\n      if (search) {\n        const res = await BooksAPI.getAll(); // get Books Data from BooksAPI\n        setBooks(books.concat(res));\n      }\n    };\n    getBooks();\n    return () => {\n      search = false;\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const updateShelf = (book, shelf) => {\n    // change book state to move between shelves\n    book.shelf = shelf;\n    setBooks(books.filter((b) => b.id !== book.id).concat(book));\n    // store changes to API\n    BooksAPI.update(book, shelf);\n  };\n\n  return (\n    <Routes>\n      <Route\n        exact\n        path={\"/react-books-library/\"}\n        element={\n          <Home\n            books={books}\n            updateShelf={updateShelf}\n          />\n        }\n      />\n      <Route\n        exact\n        path={\"/react-books-library/search\"}\n        element={\n          <Search\n            books={books}\n            updateShelf={updateShelf}\n          />\n        }\n      />\n      <Route\n        path=\"*\"\n        element={<NotFound />}\n      />\n    </Routes>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\n\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}